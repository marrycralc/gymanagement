<?php

namespace App\Http\Controllers\Auth;
use App\Http\Controllers\Auth\Controller; 
use Illuminate\Support\Facades\Auth;
use App\Models\Trainee;
use App\Models\Trainer;
use Illuminate\Http\Request;
use Carbon\Carbon;
use App\Models\User;
use Illuminate\Support\Facades\DB;

class TraineeController extends Controller
{
   public  $current_traine_id;
    public function __construct()
    {
      
        $this->middleware('auth');
    }


    public function trainee()
    {
         
    //     $this->current_traine_id =  User::with('traineewithuser')->find(Auth::user()->id);
    //   //   dd($this->current_traine_id->id);
       
        $trainerssss = Trainer::all();
        //  dd($trainerssss);
   //dd($this->current_traine_id->traineewithuser->id);
//    DB::enableQueryLog();

   $trainee = Trainee::with('trainers')->where('id', 1)->firstOrFail();
   //dd($trainee);  // This will show the SQL query generated by the relationship

// dd($trainee->trainers()->toSql(), $trainee->trainers()->getBindings());
// \Log::info($pivotData);

        return view('trainee', compact('trainee', 'trainerssss'));
    }

    public function traineedatarecored(Request $request)
    {
        $this->current_traine_id = Auth::user()->id;
        $request_data = $request->validate([
            'trainee_name' => 'required|string',
            'trainee_email' => 'required|email',
            'trainee_age' => 'required|integer',
            'trainee_height' => 'required|numeric',
            'trainee_mobile' => 'required|string',
        ]);
        
        $trainee = new Trainee();
        $trainee->trainee_name = $request_data['trainee_name'];
        $trainee->trainee_email = $request_data['trainee_email']; 
        $trainee->trainee_age = $request_data['trainee_age'];
        $trainee->trainee_height = $request_data['trainee_height'];
        $trainee->trainee_number = $request_data['trainee_mobile'];    
        $trainee->created_at = Carbon::now('Asia/Kolkata');  
        $trainee->updated_at = Carbon::now('Asia/Kolkata');
        $User = User::find($this->current_traine_id);
        $User->info_status = 'active';
        $User->save();
        $trainee->user_id = Auth::user()->id;
        $trainee->save();
        
        return redirect()->back()->with('success', 'Trainee record saved successfully!');
    }

    public function invitationtotrainer(Request $request)
    {
        // Retrieve the trainee based on the authenticated user's user_id
        $trainee = Trainee::where('user_id', Auth::user()->id)->first();
    
        // Check if the trainee exists
        if (!$trainee) {
            return response()->json(['error' => 'Trainee not found'], 404);
        }
    
        // Static data for trainer ids and requirements (for debugging)
        $trainer_ids = $request->input('tarainername'); 
    
        $requirement = $request->input('requirement');  
        
        $pivotData = [];
        if (is_array($trainer_ids)) {
            $pivotData = [];
            foreach ($trainer_ids as $trainer_id) {
                $pivotData[$trainer_id] = [
                    'requirement' => $requirement,
                    'created_at' => now(),
                    'updated_at' => now(),
                ];
            }
        
         
            $trainee->trainers()->sync($pivotData);
        } 
        
    
        // Return a success response
        return redirect()->back()->with('success', 'Trainee trainers updated successfully');
    }
    
    
    
}
    